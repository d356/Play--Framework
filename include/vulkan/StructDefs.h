#pragma once

#include <vulkan/vulkan.h>

#define DECLARE_STRUCT(structName, structId) static Vk##structName structName() { Vk##structName result = { structId }; return result; }

namespace Framework
{
	namespace Vulkan
	{
		DECLARE_STRUCT(ApplicationInfo, VK_STRUCTURE_TYPE_APPLICATION_INFO)
		DECLARE_STRUCT(CommandBufferAllocateInfo, VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO)
		DECLARE_STRUCT(CommandBufferBeginInfo, VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO)
		DECLARE_STRUCT(CommandPoolCreateInfo, VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO)
		DECLARE_STRUCT(DeviceQueueCreateInfo, VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO)
		DECLARE_STRUCT(DeviceCreateInfo, VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO)
		DECLARE_STRUCT(FramebufferCreateInfo, VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO)
		DECLARE_STRUCT(ImageMemoryBarrier, VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER)
		DECLARE_STRUCT(ImageViewCreateInfo, VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO)
		DECLARE_STRUCT(InstanceCreateInfo, VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO)
		DECLARE_STRUCT(RenderPassBeginInfo, VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO)
		DECLARE_STRUCT(RenderPassCreateInfo, VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO)
		DECLARE_STRUCT(SemaphoreCreateInfo, VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO)
		DECLARE_STRUCT(SubmitInfo, VK_STRUCTURE_TYPE_SUBMIT_INFO)
		
		//VK_KHR_swapchain
		DECLARE_STRUCT(PresentInfoKHR, VK_STRUCTURE_TYPE_PRESENT_INFO_KHR)
		DECLARE_STRUCT(SwapchainCreateInfoKHR, VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR)
	}
}

#undef DECLARE_STRUCT
